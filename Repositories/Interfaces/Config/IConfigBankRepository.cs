// <autogenerated>
//   This file was generated using IConfigBankRepository.tt.
//   Any changes made manually will be lost next time the file is regenerated.
// </autogenerated>
using CBMS.Models;
using CBMS.Models.Config;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace CBMS.Repositories.Interfaces.Config
{
    public interface IConfigBankRepository : IRepository<ConfigBankModel>,IDisposable
    {
	    /// <summary>
        /// Insert the ConfigBank Model into Database
        /// </summary>
        /// <param name="ConfigBank"></param>
        #region Create
        void InsertConfigBank(ConfigBankModel ConfigBank);
        #endregion

        #region Read
        /// <summary>
        /// Get All Active ConfigBanks
        /// </summary>
        /// <returns></returns>
        IQueryable<ConfigBankModel> GetConfigBanks();
        /// <summary>
        /// Get All Active ConfigBanks as Enumerable (Forced loading)
        /// </summary>
        /// <returns></returns>
        IEnumerable<ConfigBankModel> GetConfigBanksAsList();
        /// <summary>
        /// Get ConfigBank using its Id.
        /// </summary>
        /// <param name="ConfigBankId"></param>
        /// <returns></returns>
        ConfigBankModel GetConfigBankById(int ConfigBankId);

        /// <summary>
        /// Get ConfigBank using its Id. (Async)
        /// </summary>
        /// <param name="ConfigBankId"></param>
        /// <returns></returns>
        Task<ConfigBankModel> GetConfigBankByIdAsync(int ConfigBankId);
        #endregion

        #region Update
        /// <summary>
        /// Update ConfigBank Model.
        /// </summary>
        /// <param name="ConfigBank"></param>
        void UpdateConfigBank(ConfigBankModel ConfigBank);
        /// <summary>
        /// Update ConfigBank Model (Async)
        /// </summary>
        /// <param name="ConfigBank"></param>
        /// <returns></returns>
        Task UpdateConfigBankAsync(ConfigBankModel ConfigBank);
        #endregion

        #region Delete
        /// <summary>
        /// Mark the ConfigBank Model as Deleted in DB.
        /// </summary>
        /// <param name="ConfigBankId"></param>
        void DeleteConfigBank(int ConfigBankId);
        /// <summary>
        /// Mark the ConfigBank Model as Deleted in DB. (Async)
        /// </summary>
        /// <param name="ConfigBankId"></param>
        /// <returns></returns>
        Task DeleteConfigBankAsync(int ConfigBankId);
        #endregion
    }
}