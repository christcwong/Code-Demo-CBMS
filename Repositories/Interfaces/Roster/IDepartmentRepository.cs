// <autogenerated>
//   This file was generated using IDepartmentRepository.tt.
//   Any changes made manually will be lost next time the file is regenerated.
// </autogenerated>
using CBMS.Models;
using CBMS.Models.Roster;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace CBMS.Repositories.Interfaces.Roster
{
    public interface IDepartmentRepository : IRepository<DepartmentModel>,IDisposable
    {
	    /// <summary>
        /// Insert the Department Model into Database
        /// </summary>
        /// <param name="Department"></param>
        #region Create
        void InsertDepartment(DepartmentModel Department);
        #endregion

        #region Read
        /// <summary>
        /// Get All Active Departments
        /// </summary>
        /// <returns></returns>
        IQueryable<DepartmentModel> GetDepartments();
        /// <summary>
        /// Get All Active Departments as Enumerable (Forced loading)
        /// </summary>
        /// <returns></returns>
        IEnumerable<DepartmentModel> GetDepartmentsAsList();
        /// <summary>
        /// Get Department using its Id.
        /// </summary>
        /// <param name="DepartmentId"></param>
        /// <returns></returns>
        DepartmentModel GetDepartmentById(int DepartmentId);

        /// <summary>
        /// Get Department using its Id. (Async)
        /// </summary>
        /// <param name="DepartmentId"></param>
        /// <returns></returns>
        Task<DepartmentModel> GetDepartmentByIdAsync(int DepartmentId);
        #endregion

        #region Update
        /// <summary>
        /// Update Department Model.
        /// </summary>
        /// <param name="Department"></param>
        void UpdateDepartment(DepartmentModel Department);
        /// <summary>
        /// Update Department Model (Async)
        /// </summary>
        /// <param name="Department"></param>
        /// <returns></returns>
        Task UpdateDepartmentAsync(DepartmentModel Department);
        #endregion

        #region Delete
        /// <summary>
        /// Mark the Department Model as Deleted in DB.
        /// </summary>
        /// <param name="DepartmentId"></param>
        void DeleteDepartment(int DepartmentId);
        /// <summary>
        /// Mark the Department Model as Deleted in DB. (Async)
        /// </summary>
        /// <param name="DepartmentId"></param>
        /// <returns></returns>
        Task DeleteDepartmentAsync(int DepartmentId);
        #endregion
    }
}