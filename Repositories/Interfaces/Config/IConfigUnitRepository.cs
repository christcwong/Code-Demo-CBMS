// <autogenerated>
//   This file was generated using IConfigUnitRepository.tt.
//   Any changes made manually will be lost next time the file is regenerated.
// </autogenerated>
using CBMS.Models;
using CBMS.Models.Config;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace CBMS.Repositories.Interfaces.Config
{
    public interface IConfigUnitRepository : IRepository<ConfigUnitModel>,IDisposable
    {
	    /// <summary>
        /// Insert the ConfigUnit Model into Database
        /// </summary>
        /// <param name="ConfigUnit"></param>
        #region Create
        void InsertConfigUnit(ConfigUnitModel ConfigUnit);
        #endregion

        #region Read
        /// <summary>
        /// Get All Active ConfigUnits
        /// </summary>
        /// <returns></returns>
        IQueryable<ConfigUnitModel> GetConfigUnits();
        /// <summary>
        /// Get All Active ConfigUnits as Enumerable (Forced loading)
        /// </summary>
        /// <returns></returns>
        IEnumerable<ConfigUnitModel> GetConfigUnitsAsList();
        /// <summary>
        /// Get ConfigUnit using its Id.
        /// </summary>
        /// <param name="ConfigUnitId"></param>
        /// <returns></returns>
        ConfigUnitModel GetConfigUnitById(int ConfigUnitId);

        /// <summary>
        /// Get ConfigUnit using its Id. (Async)
        /// </summary>
        /// <param name="ConfigUnitId"></param>
        /// <returns></returns>
        Task<ConfigUnitModel> GetConfigUnitByIdAsync(int ConfigUnitId);
        #endregion

        #region Update
        /// <summary>
        /// Update ConfigUnit Model.
        /// </summary>
        /// <param name="ConfigUnit"></param>
        void UpdateConfigUnit(ConfigUnitModel ConfigUnit);
        /// <summary>
        /// Update ConfigUnit Model (Async)
        /// </summary>
        /// <param name="ConfigUnit"></param>
        /// <returns></returns>
        Task UpdateConfigUnitAsync(ConfigUnitModel ConfigUnit);
        #endregion

        #region Delete
        /// <summary>
        /// Mark the ConfigUnit Model as Deleted in DB.
        /// </summary>
        /// <param name="ConfigUnitId"></param>
        void DeleteConfigUnit(int ConfigUnitId);
        /// <summary>
        /// Mark the ConfigUnit Model as Deleted in DB. (Async)
        /// </summary>
        /// <param name="ConfigUnitId"></param>
        /// <returns></returns>
        Task DeleteConfigUnitAsync(int ConfigUnitId);
        #endregion
    }
}