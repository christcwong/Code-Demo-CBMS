// <autogenerated>
//   This file was generated using StaffProfileRepository.tt.
//   Any changes made manually will be lost next time the file is regenerated.
// </autogenerated>
using CBMS.Models;
using CBMS.Models.Roster;
using CBMS.Repositories.Interfaces.Config;
using CBMS.Repositories.Interfaces.Roster;
using CBMS.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Configuration;

namespace CBMS.Repositories.Roster
{
    public class StaffProfileRepository : CBMSRepository<StaffProfileModel>,IStaffProfileRepository
    {
        string staffProfileAdminStatusRepositoryName = WebConfigurationManager.AppSettings["CBMS.REPOSITORIES.ROSTER.STAFFPROFILEADMINSTATUS"];
        string staffProfileLeaveProfileRepositoryName = WebConfigurationManager.AppSettings["CBMS.REPOSITORIES.ROSTER.STAFFPROFILELEAVEPROFILE"];
        string staffProfileLeaveRecordRepositoryName = WebConfigurationManager.AppSettings["CBMS.REPOSITORIES.ROSTER.STAFFPROFILELEAVERECORD"];
        string payCodeRepositoryName = WebConfigurationManager.AppSettings["CBMS.REPOSITORIES.CONFIG.CONFIGPAYCODEVALUE"];
        string staffProfilePaymentDetailRepositoryName = WebConfigurationManager.AppSettings["CBMS.REPOSITORIES.ROSTER.STAFFPROFILEPAYMENTDETAIL"];
        string positionRepositoryName = WebConfigurationManager.AppSettings["CBMS.REPOSITORIES.ROSTER.POSITION"];
        string staffInfoRepositoryName = WebConfigurationManager.AppSettings["CBMS.REPOSITORIES.ROSTER.STAFFINFO"];

        IStaffProfileAdminStatusRepository staffProfileAdminStatusRepository;
        IStaffProfileLeaveProfileRepository staffProfileLeaveProfileRepository;
        IStaffProfileLeaveRecordRepository staffProfileLeaveRecordRepository;
        IConfigPayCodeValueRepository payCodeRepository;
        IStaffProfilePaymentDetailRepository staffProfilePaymentDetailRepository;
        IPositionRepository positionRepository;
        IStaffInfoRepository staffInfoRepository;

		public StaffProfileRepository():base()
        {
        }
		
        public StaffProfileRepository(CBMSDbContext context):base(context)
        {
            staffProfileAdminStatusRepository = (IStaffProfileAdminStatusRepository)Activator.CreateInstance(Type.GetType(staffProfileAdminStatusRepositoryName), context);
            staffProfileLeaveRecordRepository = (IStaffProfileLeaveRecordRepository)Activator.CreateInstance(Type.GetType(staffProfileLeaveRecordRepositoryName), context);
            staffProfileLeaveProfileRepository = (IStaffProfileLeaveProfileRepository)Activator.CreateInstance(Type.GetType(staffProfileLeaveProfileRepositoryName), context);
            payCodeRepository = (IConfigPayCodeValueRepository)Activator.CreateInstance(Type.GetType(payCodeRepositoryName), context);
            staffProfilePaymentDetailRepository = (IStaffProfilePaymentDetailRepository)Activator.CreateInstance(Type.GetType(staffProfilePaymentDetailRepositoryName), context);
            positionRepository = (IPositionRepository)Activator.CreateInstance(Type.GetType(positionRepositoryName), context);
            staffInfoRepository = (IStaffInfoRepository)Activator.CreateInstance(Type.GetType(staffInfoRepositoryName), context);
        }
		
		#region Get Context
		public CBMSDbContext GetContext(){
			return this.Context;
		}
		#endregion
		
        #region Create
        public override StaffProfileModel Create(StaffProfileModel StaffProfile)
        {
			StaffProfile.Status = ObjectStatus.ACTIVE;
			StaffProfile.ObjectCreateTime = DateTimeWrapper.Now;
			StaffProfile.ObjectUpdateTime = DateTimeWrapper.Now;

            if (StaffProfile.AdminStatus != null)
            {
                staffProfileAdminStatusRepository.InsertStaffProfileAdminStatus(StaffProfile.AdminStatus);
            }
            if (StaffProfile.LeaveProfile != null)
            {
                staffProfileLeaveProfileRepository.InsertStaffProfileLeaveProfile(StaffProfile.LeaveProfile);
            }
            if (StaffProfile.PayCode != null)
            {
                payCodeRepository.InsertConfigPayCodeValue(StaffProfile.PayCode);
            }
            if (StaffProfile.PaymentDetail != null)
            {
                staffProfilePaymentDetailRepository.InsertStaffProfilePaymentDetail(StaffProfile.PaymentDetail);
            }
            if (StaffProfile.Position != null)
            {
                positionRepository.InsertPosition(StaffProfile.Position);
            }
            if (StaffProfile.StaffInfo != null)
            {
                staffInfoRepository.InsertStaffInfo(StaffProfile.StaffInfo);
            }


			return base.Create(StaffProfile);
        }
		
		public void InsertStaffProfile(StaffProfileModel StaffProfile)
        {
			this.Create(StaffProfile);
        }
        #endregion

        #region Read
		public IQueryable<StaffProfileModel> GetStaffProfiles()
        {
            return base.Filter(m => m.Status != ObjectStatus.DELETED);
        }
        public IEnumerable<StaffProfileModel> GetStaffProfilesAsList()
        {
            return GetStaffProfiles().ToList();
        }
        public StaffProfileModel GetStaffProfileById(int StaffProfileId)
        {
            return base.Find(StaffProfileId);
        }
        public async Task<StaffProfileModel> GetStaffProfileByIdAsync(int StaffProfileId)
        {
            return await (base.FindAsync(StaffProfileId));
        }
        #endregion

        #region Update
        public void UpdateStaffProfile(StaffProfileModel StaffProfile)
        {
            if (StaffProfile == null)
            {
                throw new ArgumentException("StaffProfile cannot be null.");
            }
            StaffProfileModel dbVersionOfStaffProfile = GetStaffProfileById(StaffProfile.Id);
            if (dbVersionOfStaffProfile == null)
            {
                throw new ArgumentException("StaffProfile to be updated cannot be found in database.");
            }
            // Just put it into the db directly at the moment
            UpdateStaffProfileCore(StaffProfile, dbVersionOfStaffProfile);
            //leave the commit to somewhere else.
            return;
        }
        public async Task UpdateStaffProfileAsync(StaffProfileModel StaffProfile)
        {
            if (StaffProfile == null)
            {
                throw new ArgumentException("StaffProfile cannot be null.");
            }
            Task<StaffProfileModel> GetDbVersionOfStaffProfileTask = GetStaffProfileByIdAsync(StaffProfile.Id);


            StaffProfileModel dbVersionOfStaffProfile = await (GetDbVersionOfStaffProfileTask);
            if (dbVersionOfStaffProfile == null)
            {
                throw new ArgumentException("StaffProfile to be updated cannot be found in database.");
            }

            // Just put it into the db directly at the moment
            UpdateStaffProfileCore(StaffProfile, dbVersionOfStaffProfile);
            //leave the commit to somewhere else.
            return;
        }
        private void UpdateStaffProfileCore(StaffProfileModel Source, StaffProfileModel Destination)
        {
            //Source.ObjectUpdateTime = DateTimeWrapper.Now;
            //base.Update(Source);
            var StaffProfileClone = AutoMapper.Mapper.CreateMap<StaffProfileModel, StaffProfileModel>();
            StaffProfileClone.ForAllMembers(opt => opt.Condition(srs => !srs.IsSourceValueNull));
            StaffProfileClone.ForMember(dst => dst.Id, opt => opt.Ignore());
            StaffProfileClone.ForMember(dst => dst.ObjectCreateTime, opt => opt.Ignore());
            Destination = AutoMapper.Mapper.Map(Source, Destination);
            Destination.ObjectUpdateTime = DateTimeWrapper.Now;
            base.Update(Destination);
        }
        #endregion

        #region Delete
        public void DeleteStaffProfile(int StaffProfileId)
        {
            StaffProfileModel StaffProfile = GetStaffProfileById(StaffProfileId);
            if (StaffProfile == null)
            {
                throw new ArgumentException("StaffProfile to be updated cannot be found in database.");
            }
            StaffProfile.Status = ObjectStatus.DELETED;
			StaffProfile.ObjectUpdateTime = DateTimeWrapper.Now;
			base.Update(StaffProfile);
            return;
        }
        public async Task DeleteStaffProfileAsync(int StaffProfileId)
        {
            StaffProfileModel StaffProfile = await GetStaffProfileByIdAsync(StaffProfileId);
            if (StaffProfile == null)
            {
                throw new ArgumentException("StaffProfile to be updated cannot be found in database.");
            }
            StaffProfile.Status = ObjectStatus.DELETED;
			StaffProfile.ObjectUpdateTime = DateTimeWrapper.Now;
			base.Update(StaffProfile);
            return;
        }
        #endregion
    }
}