// <autogenerated>
//   This file was generated using ConfigBankRepository.tt.
//   Any changes made manually will be lost next time the file is regenerated.
// </autogenerated>
using CBMS.Models;
using CBMS.Models.Config;
using CBMS.Repositories.Interfaces.Config;
using CBMS.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace CBMS.Repositories.Config
{
    public class ConfigBankRepository : CBMSRepository<ConfigBankModel>,IConfigBankRepository
    {
		public ConfigBankRepository():base()
        {
        }
		
        public ConfigBankRepository(CBMSDbContext context):base(context)
        {
        }
		
		#region Get Context
		public CBMSDbContext GetContext(){
			return this.Context;
		}
		#endregion
		
        #region Create
        public override ConfigBankModel Create(ConfigBankModel ConfigBank)
        {
			ConfigBank.Status = ObjectStatus.ACTIVE;
			ConfigBank.ObjectCreateTime = DateTimeWrapper.Now;
			ConfigBank.ObjectUpdateTime = DateTimeWrapper.Now;
			return base.Create(ConfigBank);
        }
		
		public void InsertConfigBank(ConfigBankModel ConfigBank)
        {
			this.Create(ConfigBank);
        }
        #endregion

        #region Read
		public IQueryable<ConfigBankModel> GetConfigBanks()
        {
            return base.Filter(m => m.Status != ObjectStatus.DELETED);
        }
        public IEnumerable<ConfigBankModel> GetConfigBanksAsList()
        {
            return GetConfigBanks().ToList();
        }
        public ConfigBankModel GetConfigBankById(int ConfigBankId)
        {
            return base.Find(ConfigBankId);
        }
        public async Task<ConfigBankModel> GetConfigBankByIdAsync(int ConfigBankId)
        {
            return await (base.FindAsync(ConfigBankId));
        }
        #endregion

        #region Update
        public void UpdateConfigBank(ConfigBankModel ConfigBank)
        {
            if (ConfigBank == null)
            {
                throw new ArgumentException("ConfigBank cannot be null.");
            }
            ConfigBankModel dbVersionOfConfigBank = GetConfigBankById(ConfigBank.Id);
            if (dbVersionOfConfigBank == null)
            {
                throw new ArgumentException("ConfigBank to be updated cannot be found in database.");
            }
            // Just put it into the db directly at the moment
            UpdateConfigBankCore(ConfigBank, dbVersionOfConfigBank);
            //leave the commit to somewhere else.
            return;
        }
        public async Task UpdateConfigBankAsync(ConfigBankModel ConfigBank)
        {
            if (ConfigBank == null)
            {
                throw new ArgumentException("ConfigBank cannot be null.");
            }
            Task<ConfigBankModel> GetDbVersionOfConfigBankTask = GetConfigBankByIdAsync(ConfigBank.Id);


            ConfigBankModel dbVersionOfConfigBank = await (GetDbVersionOfConfigBankTask);
            if (dbVersionOfConfigBank == null)
            {
                throw new ArgumentException("ConfigBank to be updated cannot be found in database.");
            }

            // Just put it into the db directly at the moment
            UpdateConfigBankCore(ConfigBank, dbVersionOfConfigBank);
            //leave the commit to somewhere else.
            return;
        }
        private void UpdateConfigBankCore(ConfigBankModel Source, ConfigBankModel Destination)
        {
            var ConfigBankClone = AutoMapper.Mapper.CreateMap<ConfigBankModel, ConfigBankModel>();
            ConfigBankClone.ForAllMembers(opt => opt.Condition(srs => !srs.IsSourceValueNull));
            ConfigBankClone.ForMember(dst => dst.Id, opt => opt.Ignore());
			ConfigBankClone.ForMember(dst => dst.ObjectCreateTime, opt => opt.Ignore());
            Destination = AutoMapper.Mapper.Map(Source, Destination);
			Destination.ObjectUpdateTime = DateTimeWrapper.Now;
            base.Update(Destination);
        }
        #endregion

        #region Delete
        public void DeleteConfigBank(int ConfigBankId)
        {
            ConfigBankModel ConfigBank = GetConfigBankById(ConfigBankId);
            if (ConfigBank == null)
            {
                throw new ArgumentException("ConfigBank to be updated cannot be found in database.");
            }
            ConfigBank.Status = ObjectStatus.DELETED;
			ConfigBank.ObjectUpdateTime = DateTimeWrapper.Now;
			base.Update(ConfigBank);
            return;
        }
        public async Task DeleteConfigBankAsync(int ConfigBankId)
        {
            ConfigBankModel ConfigBank = await GetConfigBankByIdAsync(ConfigBankId);
            if (ConfigBank == null)
            {
                throw new ArgumentException("ConfigBank to be updated cannot be found in database.");
            }
            ConfigBank.Status = ObjectStatus.DELETED;
			ConfigBank.ObjectUpdateTime = DateTimeWrapper.Now;
			base.Update(ConfigBank);
            return;
        }
        #endregion
    }
}