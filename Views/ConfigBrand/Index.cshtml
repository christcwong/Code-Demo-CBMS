@model CBMS.Models.ViewModels.ConfigBrandViewModel

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="http://getbootstrap.com/examples/theme/theme.css">
<h2>
    Brand
    <span class="pull-right">
        <small>@Html.ActionLink("show all brand", "Index")</small>
    </span>
</h2>
@using (Html.BeginForm("CreateBrand", "ConfigBrand", FormMethod.Post, new { @class = "form-inline" }))
{
    @Html.AntiForgeryToken()
    <div class="form-group">
        <label class="sr-only">Brand Name: </label>
        @Html.EditorFor(model => model.NewBrand.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Brand Name" } })
    </div>
    <input type="submit" value="Create" class="btn btn-default" />
}
<br />
@using (Html.BeginForm())
{
    <div id="brandList">
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.NewBrand.Name)
                </th>
                <th></th>
            </tr>

            @if (Model.Brands != null)
            {
                foreach (var item in Model.Brands)
                {
                    <tr>
                        <td>
                            @Html.HiddenFor(model => model.Brands[0].Id)
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.ActionLink("Outlets", "ListOutlet", new { brandId = item.Id }, new { @class = "btn btn-primary" })
                            @Html.ActionLink("Edit", "EditBrand", new { brandId = item.Id }, new { @class = "btn btn-default" })
                            @Html.ActionLink("Delete", "DeleteBrand", new { brandId = item.Id }, new { onclick = "return confirm('Are you sure you want to deactivate this item?');", @class = "btn btn-default" })
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td>No Data return.</td>
                </tr>
            }
        </table>
    </div>
}

@if (Model.Outlets != null)
{
    <h2>Outlet</h2>
    using (Html.BeginForm("CreateOutlet", "ConfigBrand", FormMethod.Post, new { @class = "form-inline" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Brands[0].Id);
    <div class="form-group">
        <label class="sr-only">Outlet: </label>
        @Html.EditorFor(model => model.NewLocation.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Outlet" } })
    </div>
    <div class="form-group">
        <label class="sr-only">Street: </label>
        @Html.TextBox("strStreet", "", new { @class = "form-control", @placeholder = "No. Street" })
    </div>
    <div class="form-group">
        <label class="sr-only">Suburb: </label>
        @Html.EditorFor(model => model.NewLocation.Suburb, new { htmlAttributes = new { @class = "form-control", @placeholder = "Suburb" } })
    </div>
    <div class="form-group">
        <label class="sr-only">State: </label>
        @Html.TextBox("strState", "", new { @class = "form-control", @placeholder = "State" })
    </div>
    <div class="form-group">
        <label class="sr-only">PostCode: </label>
        @Html.EditorFor(model => model.NewLocation.PostCode, new { htmlAttributes = new { @class = "form-control", @placeholder = "PostCode" } })
    </div>
    <input type="submit" value="Create" class="btn btn-default" />
    }
    <br />

    <div id="outletList">
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.NewOutlet.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.NewOutlet.Location.Address)
                </th>
                <th></th>
            </tr>

            @if (Model.Outlets.Count > 0)
            {
                foreach (var item in Model.Outlets)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Location.Address)
                        </td>
                        <td>
                            @Html.ActionLink("Departments", "ListDepartment", new { outletId = item.Id }, new { @class = "btn btn-primary" })
                            @Html.ActionLink("Edit", "EditOutlet", new { outletId = item.Id }, new { @class = "btn btn-default" })
                            @Html.ActionLink("Delete", "DeleteOutlet", new { outletId = item.Id }, new { onclick = "return confirm('Are you sure you want to deactivate this item?');", @class = "btn btn-default" })
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td>No Data return.</td>
                    <td></td>
                    <td></td>
                </tr>
            }
        </table>
    </div>
}


@if (Model.Departments != null)
{
    <h2>Departments</h2>
    <div class="row">
        <div class="col-md-6">
            @using (Html.BeginForm("CreateDepartment", "ConfigBrand", FormMethod.Post, new { @class = "form-inline" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.Outlets[0].Id);
                <div class="form-group">
                    <label class="sr-only">Department Name: </label>
                    @Html.EditorFor(model => model.NewDepartment.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Department Name" } })
                </div>
                <input type="submit" value="Create" class="btn btn-default" />
            }
        </div>
        <div class="col-md-6">
            @using (Html.BeginForm("CopyDepartment", "ConfigBrand", FormMethod.Post, new { @class = "form-inline" }))
            {
                <span>Copy Departments from:</span>
                <div class="form-group">
                    @Html.DropDownList("OutletListId", (SelectList)ViewBag.OutletList, "Select an Outlet...", htmlAttributes: new { @class = "form-control" })
                </div>
                @Html.HiddenFor(model => model.Outlets[0].Id);
                <input type="submit" value="Copy" class="btn btn-default" onclick="return confirm('This action will copy positions as well, Are you sure you want to proceed?');" />
            }
        </div>
    </div>
    <br />
    <div id="departmentList">
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.NewDepartment.Name)
                </th>
                <th></th>
            </tr>

            @if (Model.Departments.Count > 0)
            {
                foreach (var item in Model.Departments)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.ActionLink("Edit", "EditDepartment", new { departmentId = item.Id }, new { @class = "btn btn-default" })
                            @Html.ActionLink("Delete", "DeleteDepartment", new { departmentId = item.Id }, new { onclick = "return confirm('Are you sure you want to deactivate this item?');", @class = "btn btn-default" })
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td>No Data return.</td>
                    <td></td>
                </tr>
            }
        </table>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
