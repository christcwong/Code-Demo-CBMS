// <autogenerated>
//   This file was generated using ILocationRepository.tt.
//   Any changes made manually will be lost next time the file is regenerated.
// </autogenerated>
using CBMS.Models;
using CBMS.Models.Roster;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace CBMS.Repositories.Interfaces.Roster
{
    public interface ILocationRepository : IRepository<LocationModel>,IDisposable
    {
	    /// <summary>
        /// Insert the Location Model into Database
        /// </summary>
        /// <param name="Location"></param>
        #region Create
        void InsertLocation(LocationModel Location);
        #endregion

        #region Read
        /// <summary>
        /// Get All Active Locations
        /// </summary>
        /// <returns></returns>
        IQueryable<LocationModel> GetLocations();
        /// <summary>
        /// Get All Active Locations as Enumerable (Forced loading)
        /// </summary>
        /// <returns></returns>
        IEnumerable<LocationModel> GetLocationsAsList();
        /// <summary>
        /// Get Location using its Id.
        /// </summary>
        /// <param name="LocationId"></param>
        /// <returns></returns>
        LocationModel GetLocationById(int LocationId);

        /// <summary>
        /// Get Location using its Id. (Async)
        /// </summary>
        /// <param name="LocationId"></param>
        /// <returns></returns>
        Task<LocationModel> GetLocationByIdAsync(int LocationId);
        #endregion

        #region Update
        /// <summary>
        /// Update Location Model.
        /// </summary>
        /// <param name="Location"></param>
        void UpdateLocation(LocationModel Location);
        /// <summary>
        /// Update Location Model (Async)
        /// </summary>
        /// <param name="Location"></param>
        /// <returns></returns>
        Task UpdateLocationAsync(LocationModel Location);
        #endregion

        #region Delete
        /// <summary>
        /// Mark the Location Model as Deleted in DB.
        /// </summary>
        /// <param name="LocationId"></param>
        void DeleteLocation(int LocationId);
        /// <summary>
        /// Mark the Location Model as Deleted in DB. (Async)
        /// </summary>
        /// <param name="LocationId"></param>
        /// <returns></returns>
        Task DeleteLocationAsync(int LocationId);
        #endregion
    }
}