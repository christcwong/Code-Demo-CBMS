// <autogenerated>
//   This file was generated using ITransferOrderRepository.tt.
//   Any changes made manually will be lost next time the file is regenerated.
// </autogenerated>
using CBMS.Models;
using CBMS.Models.Inventory;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace CBMS.Repositories.Interfaces.Inventory
{
    public interface ITransferOrderRepository : IRepository<TransferOrderModel>,IDisposable
    {
	    /// <summary>
        /// Insert the TransferOrder Model into Database
        /// </summary>
        /// <param name="TransferOrder"></param>
        #region Create
        void InsertTransferOrder(TransferOrderModel TransferOrder);
        #endregion

        #region Read
        /// <summary>
        /// Get All Active TransferOrders
        /// </summary>
        /// <returns></returns>
        IQueryable<TransferOrderModel> GetTransferOrders();
        /// <summary>
        /// Get All Active TransferOrders as Enumerable (Forced loading)
        /// </summary>
        /// <returns></returns>
        IEnumerable<TransferOrderModel> GetTransferOrdersAsList();
        /// <summary>
        /// Get TransferOrder using its Id.
        /// </summary>
        /// <param name="TransferOrderId"></param>
        /// <returns></returns>
        TransferOrderModel GetTransferOrderById(int TransferOrderId);

        /// <summary>
        /// Get TransferOrder using its Id. (Async)
        /// </summary>
        /// <param name="TransferOrderId"></param>
        /// <returns></returns>
        Task<TransferOrderModel> GetTransferOrderByIdAsync(int TransferOrderId);
        #endregion

        #region Update
        /// <summary>
        /// Update TransferOrder Model.
        /// </summary>
        /// <param name="TransferOrder"></param>
        void UpdateTransferOrder(TransferOrderModel TransferOrder);
        /// <summary>
        /// Update TransferOrder Model (Async)
        /// </summary>
        /// <param name="TransferOrder"></param>
        /// <returns></returns>
        Task UpdateTransferOrderAsync(TransferOrderModel TransferOrder);
        #endregion

        #region Delete
        /// <summary>
        /// Mark the TransferOrder Model as Deleted in DB.
        /// </summary>
        /// <param name="TransferOrderId"></param>
        void DeleteTransferOrder(int TransferOrderId);
        /// <summary>
        /// Mark the TransferOrder Model as Deleted in DB. (Async)
        /// </summary>
        /// <param name="TransferOrderId"></param>
        /// <returns></returns>
        Task DeleteTransferOrderAsync(int TransferOrderId);
        #endregion
    }
}