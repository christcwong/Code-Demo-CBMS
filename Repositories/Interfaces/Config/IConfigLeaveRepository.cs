// <autogenerated>
//   This file was generated using IConfigLeaveRepository.tt.
//   Any changes made manually will be lost next time the file is regenerated.
// </autogenerated>
using CBMS.Models;
using CBMS.Models.Config;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace CBMS.Repositories.Interfaces.Config
{
    public interface IConfigLeaveRepository : IRepository<ConfigLeaveModel>,IDisposable
    {
	    /// <summary>
        /// Insert the ConfigLeave Model into Database
        /// </summary>
        /// <param name="ConfigLeave"></param>
        #region Create
        void InsertConfigLeave(ConfigLeaveModel ConfigLeave);
        #endregion

        #region Read
        /// <summary>
        /// Get All Active ConfigLeaves
        /// </summary>
        /// <returns></returns>
        IQueryable<ConfigLeaveModel> GetConfigLeaves();
        /// <summary>
        /// Get All Active ConfigLeaves as Enumerable (Forced loading)
        /// </summary>
        /// <returns></returns>
        IEnumerable<ConfigLeaveModel> GetConfigLeavesAsList();
        /// <summary>
        /// Get ConfigLeave using its Id.
        /// </summary>
        /// <param name="ConfigLeaveId"></param>
        /// <returns></returns>
        ConfigLeaveModel GetConfigLeaveById(int ConfigLeaveId);

        /// <summary>
        /// Get ConfigLeave using its Id. (Async)
        /// </summary>
        /// <param name="ConfigLeaveId"></param>
        /// <returns></returns>
        Task<ConfigLeaveModel> GetConfigLeaveByIdAsync(int ConfigLeaveId);
        #endregion

        #region Update
        /// <summary>
        /// Update ConfigLeave Model.
        /// </summary>
        /// <param name="ConfigLeave"></param>
        void UpdateConfigLeave(ConfigLeaveModel ConfigLeave);
        /// <summary>
        /// Update ConfigLeave Model (Async)
        /// </summary>
        /// <param name="ConfigLeave"></param>
        /// <returns></returns>
        Task UpdateConfigLeaveAsync(ConfigLeaveModel ConfigLeave);
        #endregion

        #region Delete
        /// <summary>
        /// Mark the ConfigLeave Model as Deleted in DB.
        /// </summary>
        /// <param name="ConfigLeaveId"></param>
        void DeleteConfigLeave(int ConfigLeaveId);
        /// <summary>
        /// Mark the ConfigLeave Model as Deleted in DB. (Async)
        /// </summary>
        /// <param name="ConfigLeaveId"></param>
        /// <returns></returns>
        Task DeleteConfigLeaveAsync(int ConfigLeaveId);
        #endregion
    }
}