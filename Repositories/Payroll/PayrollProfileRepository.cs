// <autogenerated>
//   This file was generated using PayrollProfileRepository.tt.
//   Any changes made manually will be lost next time the file is regenerated.
// </autogenerated>
using CBMS.Models;
using CBMS.Models.Payroll;
using CBMS.Repositories.Interfaces.Payroll;
using CBMS.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace CBMS.Repositories.Payroll
{
    public class PayrollProfileRepository : CBMSRepository<PayrollProfileModel>,IPayrollProfileRepository
    {
		public PayrollProfileRepository():base()
        {
        }
		
        public PayrollProfileRepository(CBMSDbContext context):base(context)
        {
        }
		
		#region Get Context
		public CBMSDbContext GetContext(){
			return this.Context;
		}
		#endregion
		
        #region Create
        public override PayrollProfileModel Create(PayrollProfileModel PayrollProfile)
        {
			PayrollProfile.Status = ObjectStatus.ACTIVE;
			PayrollProfile.ObjectCreateTime = DateTimeWrapper.Now;
			PayrollProfile.ObjectUpdateTime = DateTimeWrapper.Now;
			return base.Create(PayrollProfile);
        }
		
		public void InsertPayrollProfile(PayrollProfileModel PayrollProfile)
        {
			this.Create(PayrollProfile);
        }
        #endregion

        #region Read
		public IQueryable<PayrollProfileModel> GetPayrollProfiles()
        {
            return base.Filter(m => m.Status != ObjectStatus.DELETED);
        }
        public IEnumerable<PayrollProfileModel> GetPayrollProfilesAsList()
        {
            return GetPayrollProfiles().ToList();
        }
        public PayrollProfileModel GetPayrollProfileById(int PayrollProfileId)
        {
            return base.Find(PayrollProfileId);
        }
        public async Task<PayrollProfileModel> GetPayrollProfileByIdAsync(int PayrollProfileId)
        {
            return await (base.FindAsync(PayrollProfileId));
        }
        #endregion

        #region Update
        public void UpdatePayrollProfile(PayrollProfileModel PayrollProfile)
        {
            if (PayrollProfile == null)
            {
                throw new ArgumentException("PayrollProfile cannot be null.");
            }
            PayrollProfileModel dbVersionOfPayrollProfile = GetPayrollProfileById(PayrollProfile.Id);
            if (dbVersionOfPayrollProfile == null)
            {
                throw new ArgumentException("PayrollProfile to be updated cannot be found in database.");
            }
            // Just put it into the db directly at the moment
            UpdatePayrollProfileCore(PayrollProfile, dbVersionOfPayrollProfile);
            //leave the commit to somewhere else.
            return;
        }
        public async Task UpdatePayrollProfileAsync(PayrollProfileModel PayrollProfile)
        {
            if (PayrollProfile == null)
            {
                throw new ArgumentException("PayrollProfile cannot be null.");
            }
            Task<PayrollProfileModel> GetDbVersionOfPayrollProfileTask = GetPayrollProfileByIdAsync(PayrollProfile.Id);


            PayrollProfileModel dbVersionOfPayrollProfile = await (GetDbVersionOfPayrollProfileTask);
            if (dbVersionOfPayrollProfile == null)
            {
                throw new ArgumentException("PayrollProfile to be updated cannot be found in database.");
            }

            // Just put it into the db directly at the moment
            UpdatePayrollProfileCore(PayrollProfile, dbVersionOfPayrollProfile);
            //leave the commit to somewhere else.
            return;
        }
        private void UpdatePayrollProfileCore(PayrollProfileModel Source, PayrollProfileModel Destination)
        {
            var PayrollProfileClone = AutoMapper.Mapper.CreateMap<PayrollProfileModel, PayrollProfileModel>();
            PayrollProfileClone.ForAllMembers(opt => opt.Condition(srs => !srs.IsSourceValueNull));
            PayrollProfileClone.ForMember(dst => dst.Id, opt => opt.Ignore());
			PayrollProfileClone.ForMember(dst => dst.ObjectCreateTime, opt => opt.Ignore());
            Destination = AutoMapper.Mapper.Map(Source, Destination);
			Destination.ObjectUpdateTime = DateTimeWrapper.Now;
            base.Update(Destination);
        }
        #endregion

        #region Delete
        public void DeletePayrollProfile(int PayrollProfileId)
        {
            PayrollProfileModel PayrollProfile = GetPayrollProfileById(PayrollProfileId);
            if (PayrollProfile == null)
            {
                throw new ArgumentException("PayrollProfile to be updated cannot be found in database.");
            }
            PayrollProfile.Status = ObjectStatus.DELETED;
			PayrollProfile.ObjectUpdateTime = DateTimeWrapper.Now;
			base.Update(PayrollProfile);
            return;
        }
        public async Task DeletePayrollProfileAsync(int PayrollProfileId)
        {
            PayrollProfileModel PayrollProfile = await GetPayrollProfileByIdAsync(PayrollProfileId);
            if (PayrollProfile == null)
            {
                throw new ArgumentException("PayrollProfile to be updated cannot be found in database.");
            }
            PayrollProfile.Status = ObjectStatus.DELETED;
			PayrollProfile.ObjectUpdateTime = DateTimeWrapper.Now;
			base.Update(PayrollProfile);
            return;
        }
        #endregion
    }
}