// <autogenerated>
//   This file was generated using IItemCategoryRepository.tt.
//   Any changes made manually will be lost next time the file is regenerated.
// </autogenerated>
using CBMS.Models;
using CBMS.Models.Inventory;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace CBMS.Repositories.Interfaces.Inventory
{
    public interface IItemCategoryRepository : IRepository<ItemCategoryModel>,IDisposable
    {
	    /// <summary>
        /// Insert the ItemCategory Model into Database
        /// </summary>
        /// <param name="ItemCategory"></param>
        #region Create
        void InsertItemCategory(ItemCategoryModel ItemCategory);
        #endregion

        #region Read
        /// <summary>
        /// Get All Active ItemCategorys
        /// </summary>
        /// <returns></returns>
        IQueryable<ItemCategoryModel> GetItemCategories();
        /// <summary>
        /// Get All Active ItemCategorys as Enumerable (Forced loading)
        /// </summary>
        /// <returns></returns>
        IEnumerable<ItemCategoryModel> GetItemCategoriesAsList();
        /// <summary>
        /// Get ItemCategory using its Id.
        /// </summary>
        /// <param name="ItemCategoryId"></param>
        /// <returns></returns>
        ItemCategoryModel GetItemCategoryById(int ItemCategoryId);

        /// <summary>
        /// Get ItemCategory using its Id. (Async)
        /// </summary>
        /// <param name="ItemCategoryId"></param>
        /// <returns></returns>
        Task<ItemCategoryModel> GetItemCategoryByIdAsync(int ItemCategoryId);
        #endregion

        #region Update
        /// <summary>
        /// Update ItemCategory Model.
        /// </summary>
        /// <param name="ItemCategory"></param>
        void UpdateItemCategory(ItemCategoryModel ItemCategory);
        /// <summary>
        /// Update ItemCategory Model (Async)
        /// </summary>
        /// <param name="ItemCategory"></param>
        /// <returns></returns>
        Task UpdateItemCategoryAsync(ItemCategoryModel ItemCategory);
        #endregion

        #region Delete
        /// <summary>
        /// Mark the ItemCategory Model as Deleted in DB.
        /// </summary>
        /// <param name="ItemCategoryId"></param>
        void DeleteItemCategory(int ItemCategoryId);
        /// <summary>
        /// Mark the ItemCategory Model as Deleted in DB. (Async)
        /// </summary>
        /// <param name="ItemCategoryId"></param>
        /// <returns></returns>
        Task DeleteItemCategoryAsync(int ItemCategoryId);
        #endregion
    }
}